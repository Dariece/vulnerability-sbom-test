package de.daniel.marlinghaus.vst.example;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Lists;
import de.daniel.marlinghaus.vst.configuration.properties.VSTAProperties;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Component;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Path;
import java.util.List;
import java.util.UUID;

@Component
@Slf4j
@AllArgsConstructor
public class Foo{

    private final VSTAProperties vstaProperties;
    private final ObjectMapper objectMapper;

    public void doSomething(String input) throws IOException {
        var writeValue = generateBars(input);
        var outFile = Path.of(vstaProperties.getTmpDirectory(), UUID.randomUUID() +".json").toFile();
        FileUtils.touch(outFile);

        try (OutputStream os = new FileOutputStream(outFile)){
            objectMapper.writeValue(os, writeValue);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        var readValue = objectMapper.readValue(outFile, List.class);

        log.info("Value from file {} is {}", outFile.getName(), readValue);
        assert writeValue.equals(readValue);
    }

    private List<Bar> generateBars(String input){

        return Lists.newArrayList(
            Bar.builder().bla(input).blub("blub").build(),
            Bar.builder().bla("blabla").blub("blubbla").build()
        );
    }
}
